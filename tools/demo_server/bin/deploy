#!/usr/bin/python3
"""Tool to deploy (and upgrade) software from source"""

# Metashell - Interactive C++ template metaprogramming shell
# Copyright (C) 2016, Abel Sinkovics (abel@sinkovics.hu)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import subprocess
import os
import shutil
import stat
import json
import errno
import datetime

import Cheetah.Template

# See comments where exceptions are caught
# pylint: disable=broad-except


def platform_id():
    """Determine the PLATFORM_ID"""
    tools_demo_server_bin = os.path.dirname(os.path.realpath(__file__))
    tools_demo_server = os.path.dirname(tools_demo_server_bin)
    tools = os.path.dirname(tools_demo_server)

    return subprocess.check_output(
        [os.path.join(tools, 'detect_platform.sh'), '--id']
    ).decode('utf-8').strip()


PLATFORM_ID = platform_id()


def path_substitutions(path):
    """Does the path substitutions"""
    return path.replace('${PLATFORM_ID}', PLATFORM_ID)


def no_logging(_):
    """Ignore log messages"""


def deploy_event(step_name, action, name):
    """Return a deploy event log entry"""
    prefix = '=========='
    act = '{0} {1}'.format(step_name, action)
    if name is None:
        return '{0} {1} {0}'.format(prefix, act)

    return '{0} {1}: {2} {0}'.format(prefix, name, act)


def set_permissions(path):
    """Sets the permissions of a deployed file or directory recursively"""
    paths = [path]
    for root, dirs, files in os.walk(path):
        paths.append(root)
        paths.extend([os.path.join(root, d) for d in dirs])
        paths.extend([os.path.join(root, f) for f in files])

    for one_path in paths:
        os.chmod(
            one_path,
            stat.S_IRUSR | stat.S_IXUSR | stat.S_IWUSR |
            stat.S_IRGRP | stat.S_IXGRP |
            stat.S_IROTH | stat.S_IXOTH
        )


def makedirs(path, log):
    """Create directories and don't throw if it exists"""
    paths = []
    while path not in ['', '/']:
        paths.insert(0, path)
        path, _ = os.path.split(path)

    for subpath in paths:
        if not os.path.exists(subpath):
            log('Creating directory {0}'.format(subpath))
            os.mkdir(subpath)
            set_permissions(subpath)


class LogToFile:
    """Logger writing logs into a file"""

    def __init__(self, filename):
        self.filename = filename
        self.file_obj = None

    def start(self):
        """Start logging"""
        makedirs(os.path.dirname(self.filename), no_logging)
        self.file_obj = \
            open(self.filename, 'w')  # pylint: disable=consider-using-with
        self('Start logging')

    def stop(self):
        """Stop logging"""
        self('Stop logging')
        self.file_obj.close()
        self.file_obj = None

    def __call__(self, msg):
        self.file_obj.write('{0}: {1}\n'.format(datetime.datetime.now(), msg))
        self.file_obj.flush()

    def __enter__(self):
        self.start()
        return self

    def __exit__(self, typ, value, traceback):
        self.stop()


def run_command(cmd, src_dir, log):
    """Run an external command"""
    log('Running command {0} in {1}'.format(' '.join(cmd), src_dir))
    with subprocess.Popen(
        cmd,
        cwd=src_dir,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    ) as proc:
        out, err = proc.communicate()
        log('Exit code: {0}'.format(proc.returncode))
        log('Stdout: {0}'.format(out.decode('utf-8')))
        log('Stderr: {0}'.format(err.decode('utf-8')))
        return out, err, proc.returncode


def git(cwd, git_cmd, log):
    """Run a git command. Returns standard output"""
    cmd = ['git']
    cmd.extend(git_cmd)
    out, err, returncode = run_command(cmd, cwd, log)
    if returncode == 0:
        return out.decode('utf-8')
    raise Exception(
        'Command {0} exited with {1}.\n\nstdout:\n{2}\n\nstderr:\n{3}'
        .format(' '.join(cmd), returncode, out, err)
    )


def remove_prefix(prefix, string):
    """Removes the prefix from the string"""
    if string.startswith(prefix):
        return string[len(prefix):]
    raise Exception('String {} does not start with {}'.format(string, prefix))


def root_of_a_git_repository(path):
    """Checks if path is the root of a Git repository"""
    return os.path.isdir(os.path.join(path, '.git'))


def choose_initial_dir(out_dir):
    """Choose an initial directory for cloning the repository into"""
    dirs = os.listdir(out_dir)
    while dirs:
        current = dirs[0]

        if root_of_a_git_repository(current):
            return current
        dirs = dirs[1:]
        dirs.extend([
            os.path.join(current, d)
            for d in os.listdir(os.path.join(out_dir, current))
            if os.path.isdir(os.path.join(out_dir, current, d))
        ])

    return 'master'


def git_repo(src_repository, out_dir, local_name, log):
    """Create and clone if does not exist"""
    repo_path = os.path.join(out_dir, local_name)
    if os.path.isdir(repo_path):
        git(repo_path, ['remote', 'set-url', 'origin', src_repository], log)
        git(repo_path, ['fetch', 'origin', '--prune'], log)
    else:
        git(out_dir, ['clone', '--recursive', src_repository, local_name], log)
    return repo_path


def origin_branches(src_repository, out_dir, log):
    """Returns the list of branches in origin"""
    return [
        remove_prefix('refs/heads/', x.split()[1]) for x in
        git(out_dir, ['ls-remote', '--heads', src_repository], log)
        .splitlines()
    ]


def git_repositories(path):
    """Returns the list of git repositories (recursively). It does not recurse
    into sub-repositories"""
    result = []
    for filename in os.listdir(path):
        full_path = os.path.join(path, filename)
        if os.path.isdir(full_path):
            if os.path.isdir(os.path.join(full_path, '.git')):
                result.append(filename)
            else:
                result.extend([
                    os.path.join(filename, p)
                    for p in git_repositories(full_path)
                ])
    return result


def git_clone(src_repository, out_dir, log):
    """Clone a repository. Create a clone for each remote branch"""
    log('Cloning {0} to {1}'.format(src_repository, out_dir))

    remote_branch_list = origin_branches(src_repository, out_dir, log)

    for filename in git_repositories(out_dir):
        if filename not in remote_branch_list:
            shutil.rmtree(os.path.join(out_dir, filename))

    result = []
    for branch in remote_branch_list:
        remote_branch = 'origin/{0}'.format(branch)
        repo = git_repo(src_repository, out_dir, branch, log)
        git(repo, ['checkout', '-f', remote_branch], log)
        git(repo, ['submodule', 'update', '-f'], log)
        result.append(
            Branch(
                branch,
                git(repo, ['rev-parse', remote_branch], log).strip(),
                log
            )
        )

    return result


def load_file(path):
    """Returns the content of the file"""
    with open(path, 'r') as in_file:
        return in_file.read()


def load_config_file(path, log):
    """Loads the config file. If fails, it returns an empty array"""
    try:
        json_config = load_file(path)
    except IOError as err:
        log('Error loading config file {0}: {1}'.format(path, err))
        return []

    try:
        return json.loads(json_config)
    except ValueError as err:
        log(
            'Invalid JSON in config file {0}.\nContent: {1}\n\nError: {2}'
            .format(path, json_config, err)
        )
        return []


def valid_config_entry(config, log):
    """Validate the config entry. Logs errors"""
    result = True
    for field in ['name', 'git']:
        if field not in config:
            log('Missing field "{0}" in config entry {1}'.format(
                field,
                json.dumps(config)))
            result = False
    return result


def optional_list(config, key):
    """Returns empty list when key is missing"""
    return config[key] if key in config else []


def deploy_file(config_name, path_from, path_to, log):
    """Deploy a file"""
    makedirs(os.path.dirname(path_to), log)
    try:
        abs_from = os.path.abspath(path_from)
        abs_to = os.path.abspath(path_to)
        if os.path.isdir(abs_from):
            makedirs(abs_to, log)
            run_command(
                ['/usr/bin/rsync', '-ruL'] + [
                    os.path.join(abs_from, f)
                    for f in os.listdir(abs_from)
                ] + [abs_to],
                '/',
                log
            )
        else:
            run_command(
                ['/usr/bin/rsync', '-uL', abs_from, abs_to],
                '/',
                log
            )
        set_permissions(abs_to)
    except IOError as err:
        log(
            'In {0} error deploying {1}: errno {2}'.format(
                config_name,
                os.path.basename(path_from),
                err.errno
            )
        )


def escape_branch_name(name):
    """Escape branch name to avoid special characters in it"""
    return name.replace('/', '_')


def symlink(dst, link, log):
    """Create or update a symlink"""
    log('Creating symlink {0} -> {1}'.format(link, dst))
    try:
        os.symlink(dst, link)
    except OSError as err:
        if err.errno == errno.EEXIST:
            os.remove(link)
            os.symlink(dst, link)
        else:
            log('Symlink creation failed. errno = {0}'.format(err.errno))
            raise


def delete_files(path, log):
    """Delete the files and dirs"""
    for filename in path:
        if os.path.isdir(filename):
            log('Deleting directory {0}'.format(filename))
            shutil.rmtree(filename)
        else:
            log('Deleting file {0}'.format(filename))
            os.remove(filename)


def files_not_symlinked_to(path, log):
    """Returns the files and dirs which no symlinks (in path) point to"""
    full_paths = [os.path.join(path, f) for f in os.listdir(path)]

    symlink_targets = [
        os.path.basename(os.path.realpath(p))
        for p in full_paths if os.path.islink(p)
    ]
    result = []
    for full_path in full_paths:
        reason = None
        if os.path.islink(full_path):
            reason = 'is a symlink'
        elif os.path.basename(full_path) in symlink_targets:
            reason = 'is a symlink target'
        if reason:
            log(
                'Not considering {0} for deletion: {1}'
                .format(full_path, reason)
            )
        else:
            log('Considering {0} for deletion'.format(full_path))
            result.append(full_path)
    return result


def flatten(list_of_lists):
    """Flatten a list of lists"""
    return [item for sublist in list_of_lists for item in sublist]


class Branch:
    """Represents a branch of a git repository"""

    def __init__(self, name, last_commit, log):
        self.name = name
        self.last_commit = last_commit
        self.was_build_error = False
        self.log = log

    def src_dir(self, config_name, out_dir):
        """src dir of the branch"""
        return os.path.join(out_dir, 'src', config_name, self.name)

    def build(self, config_name, commands, out_dir):
        """Build branch"""
        src_dir = self.src_dir(config_name, out_dir)
        for cmd in commands:
            if run_command(cmd, src_dir, self.log)[2] != 0:
                self.log('Aborting compilation of branch {0}/{1}'.format(
                    config_name, self.name))
                self.was_build_error = True
                return

    def deployment_info(self, config_name, deploy_info, out_dir):
        """Collect deployment information"""
        if self.was_build_error:
            return []

        deployer = Deployer(config_name, self, out_dir, self.log)
        return flatten(
            deployer.deployment_info(f, t) for (t, f) in deploy_info
        )

    def generate_launcher(self, out_dir, launcher, config_name, search_list):
        """Generate the launcher page"""
        out_path = os.path.join(
            out_dir,
            'src',
            config_name,
            self.name,
            launcher['dst']
        )
        makedirs(os.path.dirname(out_path), self.log)
        tmp_path = out_path + '.tmp'
        with open(tmp_path, 'w') as out_file:
            out_file.write(str(Cheetah.Template.Template(
                load_file(os.path.join(
                    out_dir,
                    'src',
                    config_name,
                    self.name,
                    launcher['src']
                )),
                searchList=search_list
            )))
            set_permissions(tmp_path)
        os.rename(tmp_path, out_path)

    def external_versions(self, config_name, deploy_info, out_dir):
        """Map of externally (to another config) deployed versions"""
        external_versions = {}
        for dep in self.deployment_info(config_name, deploy_info, out_dir):
            if dep.base != config_name:
                if dep.base not in external_versions:
                    external_versions[dep.base] = []
                external_versions[dep.base].append(
                    version_of(dep.base, dep.deployed_filename())
                )
        return external_versions


def first_dir_in_path(path):
    """Return the first directoryname of a path"""
    last = ''
    while path != '':
        path, last = os.path.split(path)
    return last


def join_path(path1, path2):
    """Join two paths. If path2 starts with /, it is still treated as a
    relative path"""
    if path2:
        if path2.startswith('/'):
            path2 = path2[1:]
        return os.path.join(path1, path2)
    return path1


class FileDeployment:
    """The deployment of one file"""

    def __init__(self, name, deployed_file, path_from_to, link_name):
        self.name = name
        self.deployed_file = deployed_file
        self.path_from, self.path_to = path_from_to
        self.link_name = link_name
        self.base = None
        self.to_path = None

    def with_base(self, base):
        """Setter of base for fluent API"""
        self.base = base
        return self

    def with_to_path(self, to_path):
        """Setter of to_path for fluent API"""
        self.to_path = to_path
        return self

    def deployed_filename(self):
        """Returns the name of the deployed file (or link)"""
        return self.link_name if self.link_name else self.deployed_file

    def deploy(self, log):
        """Do the deployment"""
        deploy_file(self.name, self.path_from, self.path_to, log)
        if self.link_name:
            symlink(os.path.basename(self.deployed_file), self.link_name, log)


def determine_to_path_suffix(entry_config, from_path_suffix):
    """Determines the suffix for the path deployment"""
    if 'dst' in entry_config:
        return \
            None if entry_config['dst'] in ['', '.'] else entry_config['dst']
    return from_path_suffix


class Deployer:
    """Class for deploying files of a project"""

    def __init__(self, name, branch, out_dir, log):
        self.name = name
        self.branch = branch
        self.out_dir = out_dir
        for path in ['bin', 'include', 'share']:
            makedirs(self.relative(path), log)

    def relative(self, path):
        """Returns a path relative to the deploy path"""
        return os.path.join(self.out_dir, path)

    def in_src_dir(self, path):
        """a path in the src dir of the branch"""
        return os.path.join(
            self.branch.src_dir(self.name, self.out_dir),
            path
        )

    def _complex_deploy_info(self, entry_config, to_path):
        """Deploy one or more files in a (user) configurable way"""
        src = path_substitutions(entry_config['src'])
        if '*' in src:
            commit_mode = False
            from_path_pre, from_path_suff = src.split('*')
            from_paths = [
                from_path_pre + v
                for v in os.listdir(
                    os.path.join(
                        self.branch.src_dir(self.name, self.out_dir),
                        from_path_pre
                    )
                )
            ]
        else:
            commit_mode = True
            from_path_suff = src
            from_paths = ['']

        results = []
        for from_path in from_paths:
            base = entry_config['to_config'] if 'to_config' in entry_config \
                else self.name

            abs_to_path = os.path.join(self.relative(to_path), base)
            to_path_suffix = '_' + join_path(
                self.branch.last_commit if commit_mode
                else os.path.basename(from_path),
                determine_to_path_suffix(entry_config, from_path_suff)
            )
            results.append(FileDeployment(
                self.name,
                abs_to_path + first_dir_in_path(to_path_suffix),
                (
                    self.in_src_dir(from_path + from_path_suff),
                    abs_to_path + to_path_suffix
                ),
                abs_to_path + '_' + escape_branch_name(self.branch.name)
                if commit_mode else None
            ).with_base(base).with_to_path(to_path))
        return results

    def deployment_info(self, entry_config, to_path):
        """Collects the files to deploy"""
        if to_path in ['include', 'share']:
            return self._complex_deploy_info(entry_config, to_path)

        src_path = path_substitutions(entry_config)

        abs_to_path = os.path.join(
            self.relative(to_path),
            os.path.basename(src_path)
        )
        return [
            FileDeployment(
                self.name,
                abs_to_path + '_' + self.branch.last_commit,
                (
                    self.in_src_dir(src_path),
                    abs_to_path + '_' + self.branch.last_commit
                ),
                abs_to_path + '_' + escape_branch_name(self.branch.name)
            ).with_base(self.name).with_to_path(to_path)
        ]


def collect_symlinks(out_dir):
    """Collect all deployed symlinks of a repository"""
    bin_dir = os.path.join(out_dir, 'bin')
    include_dir = os.path.join(out_dir, 'include')

    return [
        f for f
        in [os.path.join(bin_dir, f) for f in os.listdir(bin_dir)]
        if os.path.islink(f)
    ] + [
        f for f
        in [os.path.join(include_dir, f) for f in os.listdir(include_dir)]
        if os.path.islink(f)
    ]


def version_of(name, link):
    """Returns the version of a library given a symlink"""
    base = os.path.basename(link)
    prefix = '{0}_'.format(name)
    if base.startswith(prefix):
        return base[len(prefix):]
    raise Exception('Invalid link name {0} for {1}'.format(link, name))


def merge_external_versions_to(versions1, versions2):
    """Merges two lists of external versions"""
    for name, versions in versions2.items():
        if name not in versions1:
            versions1[name] = []
        versions1[name].extend(versions)
    return versions1


class DeployedLib:
    """Describes a deployed library's attributes"""

    def __init__(self, config):
        self.config = config
        self.branches = []
        self.used_links = []
        self.versions = []

    def deploy_info(self, of_dirs=None):
        """Getter for deployment information"""
        if of_dirs is None:
            of_dirs = ['bin', 'include', 'share']
        return [
            (t, f)
            for t in of_dirs
            for f in optional_list(self.config, t)
        ]

    def name(self):
        """Getter for the name"""
        return self.config['name']

    def uses_link(self, to_path, link):
        """Register a symlink deployed for the library"""
        self.used_links.append(link)
        if to_path == 'include':
            self.versions.append(version_of(self.name(), link))

    def default_version(self):
        """The default version of a library"""
        return self.config['default_version'] \
            if 'default_version' in self.config \
            else ''

    def display_name(self):
        """Returns the display name of the library"""
        if self.name() == '':
            return ''
        return self.name()[0].upper() + self.name()[1:]

    def launcher_info(self):
        """Builds the tuple describing the launcher information"""
        return {
            'name': self.name(),
            'display_name': self.display_name(),
            'url': self.config['url'] if 'url' in self.config else '',
            'versions': self.versions,
            'default_version': self.default_version()
        }

    def clone(self, out_dir, log):
        """Clone the source code"""
        log(deploy_event('clone', 'start', self.name()))
        cfg_path = os.path.join(out_dir, 'src', self.name())
        makedirs(cfg_path, log)
        try:
            self.branches = git_clone(self.config['git'], cfg_path, log)
            for branch in self.branches:
                for dep in branch.deployment_info(
                        self.name(), self.deploy_info(), out_dir):
                    if dep.base == self.name():
                        self.uses_link(dep.to_path, dep.deployed_filename())
            log(deploy_event('clone', 'success', self.name()))
            return True
        except Exception as err:
            # Catching all exceptions to avoid an error in one config
            # preventing the deployment of the rest
            log('Failed to deploy {0}: {1}'.format(self.name(), err))
            log(deploy_event('clone', 'fail', self.name()))
            return False

    def build(self, out_dir, log):
        """Build all branches"""
        if 'build' in self.config:
            for branch in self.branches:
                name = '{0}/{1}'.format(self.name(), branch.name)
                log(deploy_event('build', 'start', name))
                try:
                    branch.build(self.name(), self.config['build'], out_dir)
                    log(deploy_event('build', 'success', name))
                except Exception as err:
                    # Catching all exceptions to avoid an error in one branch
                    # preventing the deployment of the rest
                    log('Failed to deploy branch {0} of {1}: {2}'.format(
                        branch.name, self.name(), err))
                    log(deploy_event('build', 'fail', name))

    def deploy(self, out_dir, log):
        """Deploy the files"""
        for branch in self.branches:
            name = '{0}/{1}'.format(self.name(), branch.name)
            log(deploy_event('deploy', 'start', name))
            for dep in branch.deployment_info(
                    self.name(), self.deploy_info(), out_dir):
                dep.deploy(log)
            log(deploy_event('deploy', 'finish', name))

    def external_links(self, out_dir):
        """Collect the external links of the library"""
        return [
            (d.base, d.to_path, d.deployed_filename())
            for b in self.branches
            for d in b.deployment_info(
                self.name(),
                self.deploy_info(),
                out_dir
            )
            if d.base != self.name()
        ]

    def generate_launcher(self, out_dir, log, launcher_info, port):
        """Generate the launcher page"""
        if 'launcher' in self.config:
            for branch in self.branches:
                name = '{0}/{1}'.format(self.name(), branch.name)
                log(deploy_event('generate_launcher', 'start', name))
                try:
                    branch.generate_launcher(
                        out_dir,
                        self.config['launcher'],
                        self.name(),
                        [{'port': port, 'configs': launcher_info}]
                    )
                    log(deploy_event('generate_launcher', 'finish', name))
                except Exception as err:
                    # Catching all exceptions to avoid an error in one config
                    # preventing the deployment of the rest
                    log(
                        'Failed to generate launcher for {0}: {1}'.format(
                            self.name(),
                            err
                        )
                    )
                    log(deploy_event('generate_launcher', 'fail', name))

    def external_versions(self, out_dir):
        """Map of externally (to another config) deployed versions"""
        external_versions = {}
        for branch in self.branches:
            merge_external_versions_to(
                external_versions,
                branch.external_versions(
                    self.name(),
                    self.deploy_info(['include']),
                    out_dir
                )
            )
        return external_versions


def generate_launcher(summary, out_dir):
    """Generates the launcher data"""
    launcher_info = [dl.launcher_info() for dl in summary if dl.versions]

    external_versions = {}
    for deployed_lib in summary:
        merge_external_versions_to(
            external_versions,
            deployed_lib.external_versions(out_dir)
        )

    for info in launcher_info:
        if info['name'] in external_versions:
            info['versions'].extend(external_versions[info['name']])
        info['versions'].sort()

    return launcher_info


def libs_to_deploy(configs, out_dir):
    """Generates the map of deployment information"""
    summary = {c['name']: DeployedLib(c) for c in configs}
    for lib in summary.values():
        for in_config, to_path, link in lib.external_links(out_dir):
            if in_config not in summary:
                summary[in_config] = DeployedLib(
                    {'name': in_config, 'git': ''}
                )
            summary[in_config].uses_link(to_path, link)
    return summary.values()


def deploy_libs(configs, port, out_dir, log):
    """Do the deployment of the libraries and return the deployment summary"""

    log(deploy_event('deployment', 'start', None))

    for subdir in ['bin', 'include', 'empty']:
        makedirs(os.path.join(out_dir, subdir), log)

    symlinks_to_delete = collect_symlinks(out_dir)
    files_to_delete = flatten([
        files_not_symlinked_to(os.path.join(out_dir, subdir), log)
        for subdir in ['bin', 'include']
    ])

    summary = libs_to_deploy(configs, out_dir)

    for lib in summary:
        if not lib.clone(out_dir, log):
            log(
                'Not deleting the following files'
                ' because of cloning failure: {0}'
                .format(','.join(files_to_delete))
            )
            symlinks_to_delete = []
            files_to_delete = []

    launcher_info = generate_launcher(summary, out_dir)

    for lib in summary:
        lib.generate_launcher(out_dir, log, launcher_info, port)

    for lib in summary:
        lib.build(out_dir, log)

    for lib in summary:
        lib.deploy(out_dir, log)

    for link in symlinks_to_delete:
        if all(link not in lib.used_links for lib in summary):
            os.remove(link)

    really_delete = []
    for path in files_to_delete:
        keep = False
        for lib in summary:
            if path in lib.used_links:
                log(
                    'Not deleting {0} because used by {1}'
                    .format(path, lib.display_name())
                )
                keep = True
        if not keep:
            really_delete.append(path)
    delete_files(really_delete, log)

    log(deploy_event('deployment', 'finish', None))

    return launcher_info


def deploy(config_file, port, out_dir, log):
    """Do the deployment"""
    deploy_libs(
        [
            c for c in load_config_file(config_file, log)
            if valid_config_entry(c, log)
        ],
        port,
        out_dir,
        log
    )


def main():
    """The main function of the utility"""
    parser = argparse.ArgumentParser(description='Deploy a Metashell demo')
    parser.add_argument(
        '--config',
        required=True,
        help='The config describing how to get the code'
    )
    parser.add_argument(
        '--root',
        required=True,
        help='The root directory of the demo'
    )
    parser.add_argument(
        '--port',
        required=True,
        help='The port the running demo is listening on'
    )
    args = parser.parse_args()

    makedirs(args.root, no_logging)
    with LogToFile(os.path.join(args.root, 'log.txt')) as log:
        deploy(args.config, args.port, args.root, log)


if __name__ == '__main__':
    main()
